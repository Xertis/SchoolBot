import csv
import io
from aiogram.utils.markdown import hbold, hunderline


class eating_parser:
    @staticmethod
    def parse(file_path_or_content, is_path=True):
        eating_data = []

        try:
            file = None

            if is_path:
                file = open(file_path_or_content, mode='r', encoding='utf-8')
            else:
                file = io.StringIO(file_path_or_content)

            reader = csv.DictReader(file, delimiter=',')
            for row in reader:
                eating_data.append({
                    '–î–µ–Ω—å': row['–î–µ–Ω—å'],
                    '–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞': row['–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞'],
                    '–í—Ä–µ–º—è –ø—Ä–∏—ë–º–∞': row['–í—Ä–µ–º—è –ø—Ä–∏—ë–º–∞'],
                    '–¶–µ–Ω–∞': float(row['–¶–µ–Ω–∞']),
                    '–¢–∏–ø –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏': row['–¢–∏–ø –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏']
                })
        except Exception as e:
            return False

        return eating_data

    @staticmethod
    def to_str(eating_data, time):
        table = [f"–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∏—Ç–∞–Ω–∏—è: {time}"]
        i = 0
        while i < len(eating_data):
            current_day = eating_data[i]['–î–µ–Ω—å']
            table.append(f"\n{hunderline(current_day)}:\n")
            while i < len(
                    eating_data) and eating_data[i]['–î–µ–Ω—å'] == current_day:
                table.append(
                    f"{hbold(eating_data[i]['–¢–∏–ø –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏'])}: {eating_data[i]['–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞']}\n"
                    f"‚è∞ {eating_data[i]['–í—Ä–µ–º—è –ø—Ä–∏—ë–º–∞']} | üí∞ {eating_data[i]['–¶–µ–Ω–∞']} —Ä—É–±.\n")

                i += 1

        return "\n".join(table)
